/*
 * Laserfiche OAuth 2.0 Authorization Server API
 * An ASP.NET Core web API for Laserfiche OAuth 2.0 Authorization Server<p><strong>Build# : </strong>4f7a879120e1a11fb1d3772c18859787d28d355b_.20220404.1</p>
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.laserfiche.api.client.oauth;

import com.laserfiche.api.client.model.GetAccessTokenResponse;
import com.laserfiche.api.client.model.ProblemDetails;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for TokenApi
 */
@Ignore
public class TokenApiTest {

    private final TokenApi api = new TokenApi();

    /**
     * Request for an access token. - Use authCode to get an access token for the authorization code flow. This uses grant_type, code and redirect_uri. Furthermore, client id and client secret are taken from the Basic auth header for web applications. For SPAs, the client id should be in the request body. After getting the authorization code, the application could use it to exchange for an access token by calling this endpoint. Authorization code has a short lifetime for around 10 minutes. If it&#x27;s not used within its lifetime, it will be expired and the application should start from authorization again. - Use refreshToken to get a new access token for the authorization code flow. This uses grant_type and refresh_token. Furthermore, client id and client secret are taken from the Basic auth header for web applications. For SPAs, the client id should be in the request body. - Use Bearer header to generate access token for the client credential flow. This uses grant_type and bearer auth header.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void tokenGetAccessTokenTest() throws Exception {
        Object clientId = null;
        String grantType = null;
        Object code = null;
        Object redirectUri = null;
        Object scope = null;
        Object refreshToken = null;
        Object codeVerifier = null;
        String authorization = null;
        GetAccessTokenResponse response = api.tokenGetAccessToken(clientId, grantType, code, redirectUri, scope, refreshToken, codeVerifier, authorization);

        // TODO: test validations
    }
}
